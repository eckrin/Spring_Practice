# This is a basic workflow to help you get started with Actions

name: Deploy to Amazon EC2

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Setting environment values
env:
  AWS_REGION: ap-northeast-2 # EC2 Region
  S3_BUCKET_NAME: blog-github-actions-s3-bucket # S3 bucket name
  CODE_DEPLOY_APPLICATION_NAME: my-codedeploy-blog # Codedeploy-애플리케이션
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: my-codedeploy-deployment-group # Codedeploy-애플리케이션
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  DB_URL: ${{ secrets.DB_URL }}
  DB_USERNAME: ${{ secrets.DB_USERNAME }}
  DDL_AUTO: ${{ secrets.DDL_AUTO }}
  EXPIRE_LEN: ${{ secrets.EXPIRE_LEN }}
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  SERVER_PORT: ${{ secrets.SERVER_PORT }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "deploy"
  deploy:
    name: Deploy
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: production
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:        
      # (1) 기본 체크아웃
      - name: Checkout
        uses: actions/checkout@v2

      # (2) JDK 11 세팅
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      
      # (3) Gradle 권한설정
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
              ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        shell: bash

      # (4) Gradle build (Test 제외)
      - name: Build with Gradle
        run: ./gradlew build
        shell: bash

      # (5) AWS 인증 (IAM 사용자 Access Key, Secret Key 활용)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # (6) 빌드 결과물을 S3 버킷에 업로드
      - name: Upload to AWS S3
        run: |
          aws deploy push \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --ignore-hidden-files \
            --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip \
            --source .

      # (7) S3 버킷에 있는 파일을 대상으로 CodeDeploy 실행
      - name: Deploy to AWS EC2 from S3
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
            --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA.zip,bundleType=zip
        
